# Converted from migrate.ipynb
# This file concatenates all code cells in the original notebook in order.


# ---------- Cell 1 (extracted code) ----------

import pandas as pd
from pymongo import MongoClient

# ---- √âtape 1 : Charger le CSV ----
def load_csv(file_path):
    df = pd.read_csv('archive/healthcare_dataset.csv')  # <-- Charger ton fichier CSV
    print("‚úÖ CSV charg√© avec succ√®s ! Voici toutes les lignes üìú")
    print(df)  # üëà Affiche toutes les lignes
    return df

# Exemple d'ex√©cution
if __name__ == "__main__":
    load_csv('archive/healthcare_dataset.csv')


# ---------- Cell 2 (extracted code) ----------

# --- √âtape 2 : Nettoyer les donn√©es ---
def clean_data(df):
    # Supprimer les doublons
    df = df.drop_duplicates()
    # Remplacer les NaN par None (compatible MongoDB)
    df = df.where(pd.notnull(df), None)
    print("‚úÖ Donn√©es nettoy√©es : doublons supprim√©s, valeurs manquantes remplac√©es.")
    return df

# ---------- Cell 3 (extracted code) ----------

# --- √âtape 2 : V√©rifier l'int√©grit√© des donn√©es ---
def check_data_quality(df):
    print("\nüìä V√©rification des donn√©es...")
    print("üìå Colonnes disponibles :", df.columns.tolist())
    print("üìà Types de colonnes :\n", df.dtypes)
    print("üß™ Valeurs manquantes :\n", df.isnull().sum())
    print("üì¶ Doublons :", df.duplicated().sum())

# ---------- Cell 4 (extracted code) ----------

# --- √âtape 3 : Connexion √† MongoDB ---
def connect_mongodb(db_name, collection_name):
    client = MongoClient("mongodb://127.0.0.1:27017")
    db = client[db_name]
    collection = db[collection_name]
    return collection

# ---------- Cell 5 (extracted code) ----------

# --- √âtape 4 : Ins√©rer les donn√©es dans MongoDB ---
def insert_data(collection, df):
    data = df.to_dict(orient="records")
    if len(data) == 0:
        print("‚ö†Ô∏è Aucune donn√©e √† ins√©rer.")
        return
    collection.delete_many({})  # Supprime les anciens documents (optionnel)
    collection.insert_many(data)
    print(f"‚úÖ {len(data)} documents ins√©r√©s avec succ√®s dans MongoDB !")


# ---------- Cell 6 (extracted code) ----------


# --- √âtape 5 : Lire les donn√©es pour v√©rifier ---
def read_data(collection):
    print("\nüì§ V√©rification des donn√©es ins√©r√©es :")
    for doc in collection.find().limit(5):
        print(doc)

# --- Script principal ---
if __name__ == "__main__":
    # 1Ô∏è‚É£ Charger le CSV
    df = load_csv("archive/healthcare_dataset.csv")

    # 2Ô∏è‚É£ V√©rifier les donn√©es
    check_data_quality(df)

    # 3Ô∏è‚É£ Connexion √† MongoDB
    collection = connect_mongodb("healthcare_db", "patients")

    # 4Ô∏è‚É£ Ins√©rer les donn√©es
    insert_data(collection, df)

    # 5Ô∏è‚É£ Lire les donn√©es depuis MongoDB
    read_data(collection)


# ---------- Cell 7 (extracted code) ----------

try:
    collection = connect_mongodb("healthcare_db", "patients")  # üëà m√™me nom que ta fonction
    print(f"La collection '{collection.name}' est accessible.")
except Exception as e:
    print(f"‚ùå Erreur de connexion √† MongoDB : {e}")


# ---------- Cell 9 (extracted code) ----------

if __name__ == "__main__":
    # ‚ö†Ô∏è Important : ce chemin doit correspondre au volume mont√© dans docker-compose
    df = pd.read_csv('archive/healthcare_dataset.csv')  # ‚úÖ plus d'espace inutile ici

    # ‚úÖ On appelle directement la fonction pour obtenir la collection
    collection = connect_mongodb("healthcare_db", "patients")

    # ‚úÖ On ins√®re les donn√©es dans MongoDB
    insert_data(collection, df)


# ---------- Cell 11 (extracted code) ----------

# --- √âtape 6 : CREATE - Ajouter un nouveau document ---
def create_document(collection, new_doc):
    result = collection.insert_one(new_doc)
    print(f"‚úÖ Nouveau document ins√©r√© avec l'ID : {result.inserted_id}")

# --- √âtape 7 : READ - Lire les documents ---
def read_documents(collection, limit=5):
    print("\nüì• Lecture des documents dans MongoDB :")
    for doc in collection.find().limit(limit):
        print(doc)

# --- √âtape 8 : UPDATE - Modifier un document ---
def update_document(collection, query, new_values):
    result = collection.update_one(query, {"$set": new_values})
    if result.modified_count > 0:
        print("‚úÖ Document mis √† jour avec succ√®s !")
    else:
        print("‚ö†Ô∏è Aucun document correspondant trouv√© pour la mise √† jour.")

# --- √âtape 9 : DELETE - Supprimer un document ---
def delete_document(collection, query):
    result = collection.delete_one(query)
    if result.deleted_count > 0:
        print("üóëÔ∏è Document supprim√© avec succ√®s !")
    else:
        print("‚ö†Ô∏è Aucun document correspondant trouv√© pour la suppression.")
